import streamlit as st
import requests
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt

#API_URL = "https://nine-laba.onrender.com/predict/"
API_URL = "http://127.0.0.1:8000/predict/"# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –ø–æ—Ç–æ–º—É —á—Ç–æ –ù–ï –ª–æ–∫–∞–ª—å–Ω—ã–π –£–ú–ï–† –ë–õ–ò–ù
CLASS_NAMES = ['cat', 'dog', 'panda']
MAX_FILE_SIZE = 2 * 1024 * 1024  # 2 MB (–±–æ–ª—å—à–µ - —É–∂–µ —Ç—è–∂–µ–ª–æ –±—ã–ª–æ –¥–ª—è –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ–º–ø –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –≤—Å–µ —Ä–∞–≤–Ω–æ)
# –∫—Ä–∞—Å–µ–≤–µ–Ω—å–∫–∞
st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üê±üê∂üêº")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏, —Å–æ–±–∞–∫–∏ –∏–ª–∏ –ø–∞–Ω–¥—ã")
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–± –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏—à–Ω–µ–≥–æ,–Ω–∞–¥–æ–µ–ª–∏ —É–∂–µ)
st.info(f"""
**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** JPEG, PNG  
**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** {MAX_FILE_SIZE // 1024 // 1024}MB  
**–û–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ –∫–ª–∞—Å—Å—ã:** {', '.join(CLASS_NAMES)}
""")


def preprocess_image_client(image: Image.Image) -> bytes:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ API"""
    if image.mode != 'RGB':
        image = image.convert('RGB')
    image = image.resize((224, 224))
    img_byte_arr = BytesIO()
    image.save(img_byte_arr, format='PNG')
    return img_byte_arr.getvalue()


def api_health_check():
    try:
        health_url = API_URL.replace("/predict/", "/")
        response = requests.get(health_url, timeout=5)
        return response.status_code == 200
    except Exception:
        return False


def main():
    if not api_health_check():
        st.warning("‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π.")

    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        type=['jpg', 'jpeg', 'png'],
        accept_multiple_files=False
    )
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ!
    if uploaded_file:
        if uploaded_file.size > MAX_FILE_SIZE:
            st.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE // 1024 // 1024}MB)")
            return

        try:
            img = Image.open(uploaded_file)
            st.image(img, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_column_width=True)
            processed = preprocess_image_client(img)
            files = {"file": ("image.png", processed, "image/png")}
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                response = requests.post(API_URL, files=files, timeout=60)
            if response.status_code == 200:
                result = response.json()
                st.success(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result['class'].capitalize()}")
                # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ-—É–º–Ω–æ–º—É –±—ã–ª–æ)
                fig, ax = plt.subplots()
                bars = ax.bar(result['probabilities'].keys(), result['probabilities'].values())
                ax.bar_label(bars, fmt="%.2f")
                ax.set_ylim(0, 1)
                ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
                ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º")
                st.pyplot(fig)
            elif 400 <= response.status_code < 500:
                st.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {response.text}")
            else:
                st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
        except Exception as e: # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –≤—Å–µ –ø–ª–æ—Ö–æ
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {str(e)}")


if __name__ == "__main__":
    main()